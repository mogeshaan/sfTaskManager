<apex:page Controller="TaskManage">
  <script type="text/javascript">
    $j = jQuery.noConflict();
    DATE_TYPE_SCHE = 'SCHE';
    DATE_TYPE_ACT = 'ACT';
    REC_TYPE_ODD = 'odd';
    REC_TYPE_EVEN = 'even';
    CLASS_WEEKDAY = 'thDayWeekDay';
    CLASS_SATURDAY = 'thSaturday';
    CLASS_SUNDAY = 'thSunday';
    CLASS_HOLIDAY = 'thHoliday';
    MOVE_TYPE_PREV = 'PREV';
    MOVE_TYPE_NEXT = 'NEXT';
    DAY_TYPE_WEEKDAY = 'WD';
    DAY_TYPE_SATURDAY = 'ST';
    DAY_TYPE_SUNDAY = 'SU';
    DAY_TYPE_HOLIDAY = 'HD';
    LIST_VALUE_ALL = '{!condAllKana}';
    HTML_OPTION_COMPALL = '<option class="optComp">' + LIST_VALUE_ALL + '</option>';
    HTML_OPTION_DEPTALL = '<option class="optDept">' + LIST_VALUE_ALL + '</option>';
    STATUS_NOTYETSTARTED = '未着手';
    STATUS_INPROCESS = '進行中';
    STATUS_COMPLETED = '完了済';
    STATUS_DELAY = '遅延';

    /****************************************
 * 共通患数
 ****************************************/
    /**
     * 休日判定
     * @param  Date       pDate
     * @return Boolean    true: 休日、false: 休日ではない
     */
    function isHoliday(pDate) {
      var dayType = getDayType(pDate);
      switch (dayType) {
        case DAY_TYPE_SUNDAY:
        case DAY_TYPE_SATURDAY:
        case DAY_TYPE_HOLIDAY:
          return true;
          break;
        default:
          return false;
      }
      return false;
    }

    /**
     * 曜日タイプの取得
     * @param  Date pDate
     * @return String
     */
    function getDayType(pDate) {
      if (!pDate) {
        return;
      }
      var dayNum = pDate.getDay();
      switch (dayNum) {
        case 0:
          return DAY_TYPE_SUNDAY;
          break;
        case 6:
          return DAY_TYPE_SATURDAY;
          break;
        default:
          if (arHolidays.length > 0) {
            for (var i = 0; i < arHolidays.length; i++) {
              var gDate = new Date(arHolidays[i]["ymd"]);
              if (getYearWrap(pDate) == getYearWrap(gDate) && pDate.getMonth() == gDate.getMonth() && pDate.getDate() == gDate.getDate()) {
                return DAY_TYPE_HOLIDAY;
              }
            }
          }
          break;
      }
      return DAY_TYPE_WEEKDAY;
    }

    /**
     * 休日名を取得する
     * @param  Date pDate
     * @return String
     */
    function getHolidayName(pDate) {
      if (arHolidays.length > 0) {
        for (var i = 0; i < arHolidays.length; i++) {
          var gDate = new Date(arHolidays[i]["ymd"]);
          if (getYearWrap(pDate) == getYearWrap(gDate) && pDate.getMonth() == gDate.getMonth() && pDate.getDate() == gDate.getDate()) {
            return arHolidays[i]["Name"];
          }
        }
      }
    }

    /**
     * 2つの日付の日数を求める
     * @param  Date pStartDate 開始日
     * @param  Date pEndDate   終了日
     * @return Number            日数
     */
    function calcDays(pStartDate, pEndDate) {
      if (!pStartDate || !pEndDate) {
        return '';
      }
      var date1Time = pStartDate.getTime();
      var date2Time = pEndDate.getTime();
      var timeADay = 1000 * 60 * 60 * 24;
      var times = 0;
      if (date1Time <= date2Time) {
        if (skipHolidayFlag == "false") {
          // 休日スキップなし
          times = date2Time - date1Time + timeADay;
        } else {
          // 休日スキップあり
          for (var i = date1Time; i <= date2Time; i += timeADay) {
            if (!isHoliday(new Date(i))) {
              times += timeADay;
            }
          }
        }
      }

      var days = Math.floor(times / timeADay);
      return days;
    }

    /**
     * 月の日数を算出する
     */
    function getDaysInMonth(pMonth) {
      if (!pMonth) {
        return null;
      }
      var year = getYearWrap(pMonth);
      var month = pMonth.getMonth();
      return new Date(year, parseInt(month, 10) + 1, 0).getDate();
    }

    /**
     * 年取得
     * @param  Date pDate
     * @return Int
     */
    function getYearWrap(pDate) {
      if (!pDate) {
        return null;
      }
      var year = parseInt(pDate.getFullYear(), 10);
      if (year < 2000) {
        year += 1900;
      }
      return year;
    }

    /**
     * 今月
     * @return {Date}
     */
    function getThisMonth() {
      var nowDate = new Date();
      return new Date(getYearWrap(nowDate), nowDate.getMonth(), 1);
    }

    /**
     * 翌月
     * @param  {Date} pMonth 月
     * @return {Date}        翌月
     */
    function getNextMonth(pMonth) {
      if (!pMonth) {
        return getThisMonth();
      }
      var year = parseInt(getYearWrap(pMonth), 10);
      var month = parseInt(pMonth.getMonth(), 10);
      if (month == 11) {
        year++;
        month = 0;
      } else {
        month++;
      }
      return new Date(year, month, 1);
    }

    /**
    * 前月
    * @param  {Date} pMonth 月
    * @return {Date}        前月
    */
    function getPrevMonth(pMonth) {
      if (!pMonth) {
        return getThisMonth();
      }
      var year = parseInt(getYearWrap(pMonth), 10);
      var month = parseInt(pMonth.getMonth(), 10);
      if (month == 1) {
        year--;
        month = 11;
      } else {
        month--;
      }
      return new Date(year, month, 1);
    }

    /**
     * YYYY年MM月書式の年月を取得
     * @param  Date pDate
     * @return String
     */
    function getYearMonthString(pDate) {
      if (!pDate) {
        return null;
      }
      return getYearWrap(pDate) + "年" + (parseInt(pDate.getMonth() + 1, 10) + "月")
    }

    /**
     * YYYY-MM-DD文字列を日付型に変換する
     * @param  String pDateString
     * @return Date
     */
    function getDateFromString(pDateString) {
      if (!pDateString) {
        return null;
      }
      var arString = pDateString.split('-');
      return new Date(arString[0], parseInt(arString[1], 10) - 1, arString[2]);
    }

    /**
     * 日付型からYYYY-MM-DD書式の日付文字列を取得する
     * @param  Date pDate
     * @return String
     */
    function getFormattedDate(pDate) {
      if (!pDate) {
        return null;
      }
      return getYearWrap(pDate) + '-' + ('0' + (parseInt(pDate.getMonth(), 10) + 1)).slice(-2) + '-' + ('0' + pDate.getDate()).slice(-2);
    }

    /**
     * 指定日付がスケジュール内か判定する
     * @param  Date pStartDate   スケジュール開始日付
     * @param  Date pEndDate     スケジュール終了日付
     * @param  Date pDateInquiry 指定日付
     * @param  String pProcType  SHCE:予定、ACT:実績
     * @return Boolean
     */
    function judgeInSchedule(pStartDate, pEndDate, pDateInquiry, pProcType) {
      if (!pStartDate) {
        return false;
      }
      var endDate = pEndDate;
      if (pProcType == DATE_TYPE_ACT && !pEndDate) {
        // 実績で終了日がない場合はシステム日付を使用する
        endDate = new Date();
      }
      if (!endDate) {
        return false;
      }

      // 休日チェックがあり、調査対象日が休日の場合はfalse
      if (skipHolidayFlag == 'true' && isHoliday(pDateInquiry)) {
        return false;
      }

      var stTime = parseInt(pStartDate.getTime(), 10);
      var edTime = parseInt(endDate.getTime(), 10);
      var iqdTime = 0;
      if (pDateInquiry) {
        iqdTime = parseInt(pDateInquiry.getTime(), 10);
      }
      if (stTime <= iqdTime && edTime >= iqdTime) {
        return true;
      } else {
        return false;
      }
    }

/****************************************
 * 本体処理
 ****************************************/
    $j(document).ready(function () {
      // 各種オブジェクト
      var objDiv = $j('#outerBox');
      var taskData = $j('input[id$=hidTaskData]');
      var errorHidden = $j('input[id$=hidErrorMessage]');
      if (errorHidden.val() == '') {
        var errorMessage = '';
      } else {
        var errorMessage = JSON.parse(errorHidden.attr('value'));
      }
      var taskRecData = JSON.parse(taskData.attr('value'));
      var tabTaskDataTHead = $j('#tabTaskData thead');
      var tabTaskDataTbody = $j('#tabTaskData tbody');
      var thisMonth = getThisMonth();
      startMonth = thisMonth;
      skipHolidayFlag = $j('#hidSkipHoliday').attr('value');
      arHolidays = Array();
      arCompany = Array();
      arDepartment = Array();

      /**
       * バインドの設定
       * @return void
       */
      function setBind() {
        /* ボタン処理 */
        // 削除
        $j('tr.trDraggable div.btnDelete').unbind('click');
        $j('tr.trDraggable div.btnDelete').bind('click', function () {
          if ($j('tr.trDraggable'))
            var targetRowNum = $j('div.btnDelete').index(this);
          $j('tr.trDraggable').eq(targetRowNum).remove();
          reSetRowNumber();
          remakeJSON();
          return false;
        });
        // 詳細
        $j('tr.trDraggable div.btnTaskLink').unbind('click');
        $j('tr.trDraggable div.btnTaskLink').bind('click', function () {
          if ($j('tr.trDraggable'))
            var targetRowNum = $j('div.btnTaskLink').index(this);
            var idValue = $j('tr.trDraggable').eq(targetRowNum).find('input[name="Id"]').val();
            if (idValue.length > 0 && idValue != undefined) {
              // Idがセットされていたらその詳細画面に遷移する
              //location.href = '/' + idValue;
              window.open('/' + idValue, '_blank');
            } else {
              // Idがない場合はメッセージ
              alert('このタスクは保存されていません。\n先に「保存」または「適用」をクリックしてデータを保存して下さい。');
            }
            reSetRowNumber();
            remakeJSON();
            return false;
        });
        // 追加
        $j('tr.trDraggable div.btnAdd').unbind('click');
        $j('tr.trDraggable div.btnAdd').bind('click', function () {
          var targetRowNum = $j('div.btnAdd').index(this);
          var copyRec = {
            "EndDateSchedule__c": "",
            "Id": "",
            "Name": "",
            "PersonInCharge__c": "",
            "StartDateSchedule__c": "",
            "TaskNumber__c": "",
            "StartDate__c": "",
            "EndDate__c": "",
            "TaskUser__c": ""
          };

          createRecord(copyRec, targetRowNum);
          setStatus(targetRowNum + 1); // ステータス設定
          return false;
        });
        // コピー
        $j('tr.trDraggable div.btnCopy').unbind('click');
        $j('tr.trDraggable div.btnCopy').bind('click', function () {
          var targetRowNum = $j('div.btnCopy').index(this);
          var targetTr = $j('tr.trDraggable').eq(targetRowNum);
          // Id以外をコピーする
          var copyRec = {
            "EndDateSchedule__c": targetTr.find('input[name="EndDateSchedule__c"]').val(),
            "Name": targetTr.find('input[name="Name"]').val(),
            "PersonInCharge__c": targetTr.find('input[name="PersonInCharge__c"]').val(),
            "StartDateSchedule__c": targetTr.find('input[name="StartDateSchedule__c"]').val(),
            "TaskNumber__c": targetTr.find('input[name="TaskNumber__c"]').val(),
            "StartDate__c": targetTr.find('input[name="StartDate__c"]').val(),
            "EndDate__c": targetTr.find('input[name="EndDate__c"]').val(),
            "TaskUser__c": targetTr.find('input[name="TaskUser__c"]').val()
          };

          createRecord(copyRec, targetRowNum);
          setStatus(targetRowNum + 1); // ステータス設定
          return false;
        });

        // 担当
        $j('tr.trDraggable div.divSelectUser').unbind('click');
        $j('tr.trDraggable div.divSelectUser').bind('click', function () {
          var targetRowNum = $j('div.divSelectUser').index(this);
          // ユーザー取得
          Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.TaskManage.getUser}', function (result, event) {
            if (event.status) {
              // リストに追加
              $j('li.liUser').remove();
              for (var i = 0; i < result.length; i++) {
                var liHtml = '<li class="liUser ui-widget-content ui-corner-all">' + result[i]["Name"];
                liHtml += '<input type="hidden" name="TaskUser__c" value="' + result[i]["Id"] + '" />';
                liHtml += '</li>';
                $j('#ulUser').append(liHtml);
              }
              // 値を戻す行の番号
              $j('#hidUserReturnRowNum').val(targetRowNum);
              // セレクタブル化
              $j('#ulUser').selectable();
              // 選択したらセット
              $j('#ulUser > li').unbind('click');
              $j('#ulUser > li').bind('click', function () {
                if (!$j(this).text() == "") {

                  // 名前を担当者にセットする
                  var targetRowNum = parseInt($j('#hidUserReturnRowNum').val(), 10);
                  $j('input[name="PersonInCharge__c"]').eq(targetRowNum).val($j(this).text());
                  // IDをHIDDEN項目にセットする
                  $j('input[name="TaskUser__c"]').eq(targetRowNum).val($j(this).find('input[name="TaskUser__c"]').val());
                }
                // JSONを再作成
                remakeJSON();
                $j('#divUserPopup').dialog('close');
              });

              // ダイアログオープン
              $j('#divUserPopup').dialog('open');
              return false;
            } else {
              alert(event.message);
              return null;
            }

          }, {
            escape: true
          });

          return false;
        });

        /* 項目変更のバリデーション */
        $j('tr.trDraggable').unbind('change');
        $j('tr.trDraggable').bind('change', function (event) {
          reSetRowNumber();
          remakeJSON();
        });

        /* 日付変更時のカレンダー再作成 */
        $j('tr.trDraggable input.clStartDateSchedule__c, tr.trDraggable input.clEndDateSchedule__c, tr.trDraggable input.clStartDate__c, tr.trDraggable input.clEndDate__c').unbind('change');
        $j('tr.trDraggable input.clStartDateSchedule__c').bind('change', function () {
          var rowNum = $j('input.clStartDateSchedule__c').index(this);
          setScheDays(rowNum);
          makeCalendar(rowNum);
          setStatus(rowNum);
        });
        $j('tr.trDraggable input.clEndDateSchedule__c').bind('change', function () {
          var rowNum = $j('input.clEndDateSchedule__c').index(this);
          setScheDays(rowNum);
          makeCalendar(rowNum);
          setStatus(rowNum);
        });
        $j('tr.trDraggable input.clStartDate__c').bind('change', function () {
          var rowNum = $j('input.clStartDate__c').index(this);
          setActDays(rowNum);
          makeCalendar(rowNum);
          setStatus(rowNum);
        });
        $j('tr.trDraggable input.clEndDate__c').bind('change', function () {
          var rowNum = $j('input.clEndDate__c').index(this);
          setActDays(rowNum);
          makeCalendar(rowNum);
          setStatus(rowNum);
        });

        /* DatePicker */
        $j.datepicker.setDefaults($j.datepicker.regional["ja"]);
        $j('tr.trDraggable input.iptDatePicker').datepicker({numberOfMonths: 3, showButtonPanel: true, dateFormat: "yy-mm-dd"});

        /* 担当者変更時はHIDDENのIDを消す */
        $j('tr.trDraggable input.clPersonInCharge__c').unbind('change');
        $j('tr.trDraggable input.clPersonInCharge__c').bind('change', function () {
          var rowNum = $j('input.clPersonInCharge__c').index(this);
          $j('input.clTaskUser__c').eq(rowNum).val('');
        });
      }

      /**
       * No.の再設定
       * @return {void}
       */
      function reSetRowNumber() {
        var objNumTd = $j('.clTaskNumber__c');
        if (objNumTd.size() < 1) {
          return;
        }
        var i = 1;
        objNumTd.each(function () {
          objNumTd.eq(objNumTd.index(this)).val(i);
          i++;
        });
      }

      /**
       * 明細行の可視設定
       * @return void
       */
      function setRowVisibility() {
        // チェック状態に応じて可視設定を変更
        // 未着手
        if ($j('#tabTaskData input#cbNotYetStarted').is(':checked')) {
          $j('#tabTaskData tr.statusNotStarted').show('fast');
        } else {
          $j('#tabTaskData tr.statusNotStarted').hide('fast');
        }
        // 進行中
        if ($j('#tabTaskData input#cbInProgress').is(':checked')) {
          $j('#tabTaskData tr.statusInProgress').show('fast');
        } else {
          $j('#tabTaskData tr.statusInProgress').hide('fast');
        }
        // 完了済
        if ($j('#tabTaskData input#cbCompleted').is(':checked')) {
          $j('#tabTaskData tr.statusCompleted').show('fast');
        } else {
          $j('#tabTaskData tr.statusCompleted').hide('fast');
        }
        // 遅延
        if ($j('#tabTaskData input#cbDelay').is(':checked')) {
          $j('#tabTaskData tr.statusDelay').show('fast');
        } else {
          $j('#tabTaskData tr.statusDelay').hide('fast');
        }
      }

      /**
       * JSONの再作成
       * @return void
       */
      function remakeJSON() {
        var objTr = $j('tr.trDraggable');
        var arTask = new Array();
        var recString = "";
        var rowNum = 0;
        var Std = "";
        var Edd = "";

        objTr.each(function () {
          recString = {
            "EndDateSchedule__c": $j(this).find('input[name="EndDateSchedule__c"]').val(),
            "Id": $j(this).find('input[name="Id"]').val(),
            "Name": $j(this).find('input[name="Name"]').val(),
            "PersonInCharge__c": $j(this).find('input[name="PersonInCharge__c"]').val(),
            "StartDateSchedule__c": $j(this).find('input[name="StartDateSchedule__c"]').val(),
            "TaskNumber__c": $j(this).find('input[name="TaskNumber__c"]').val()
          }
          std = $j(this).find('input[name="StartDate__c"]').val();
          if (std.trim() != "") {
            recString["StartDate__c"] = std.trim();
          }
          edd = $j(this).find('input[name="EndDate__c"]').val();
          if (edd.trim() != "") {
            recString["EndDate__c"] = edd.trim();
          }
          tUser = $j(this).find('input[name="TaskUser__c"]').val();
          if (tUser.trim() != "") {
            recString["TaskUser__c"] = tUser.trim();
          }
          arTask.push(recString);
          rowNum++;
        });
        taskData.val(JSON.stringify(arTask));
      }

      /**
       * カレンダーHTMLの作成
       * @param  Date pStartDateSche 予定開始日
       * @param  Date pEndDateSche   予定終了日
       * @param  Date pStartDate     実績開始日
       * @param  Date pEndDate       実績終了日
       * @parem  Int  pRowNumber     行番号
       * @return String              HTML
       */
      function getCalendarHtml(pStartDateSche, pEndDateSche, pStartDate, pEndDate, pRowNumber) {
        var htmlPhrase = "";
        var thisDate = "";

        // 開始月
        for (var i = 1; i <= getDaysInMonth(startMonth); i++) {
          thisDate = new Date(getYearWrap(startMonth), startMonth.getMonth(), i);
          htmlPhrase += '<td class="tdCalendar">';
          htmlPhrase += '<table>';
          htmlPhrase += '<tr><td>';
          // 予定
          if (judgeInSchedule(getDateFromString(pStartDateSche), getDateFromString(pEndDateSche), thisDate, DATE_TYPE_SCHE)) {
            htmlPhrase += '<div class="divInSchedule">';
          } else {
            if (isHoliday(thisDate)) {
              htmlPhrase += '<div class="divHoliday">';
            } else {
              htmlPhrase += '<div class="divOutOfSchedule">';
            }
          }
          htmlPhrase += '</div></td></tr>';
          // 実績
          htmlPhrase += '<tr><td>';
          if (judgeInSchedule(getDateFromString(pStartDate), getDateFromString(pEndDate), thisDate, DATE_TYPE_ACT)) {
            htmlPhrase += '<div class="divInAct">';
          } else {
            if (isHoliday(thisDate)) {
              htmlPhrase += '<div class="divHoliday">';
            } else {
              htmlPhrase += '<div class="divOutOfAct">';
            }
          }
          htmlPhrase += '</div></td></tr>';

          htmlPhrase += '</table>';
          htmlPhrase += '</td>';
        }
        // 翌月
        for (var i = 1; i <= getDaysInMonth(getNextMonth(startMonth)); i++) {
          thisDate = new Date(getYearWrap(getNextMonth(startMonth)), getNextMonth(startMonth).getMonth(), i);
          htmlPhrase += '<td class="tdCalendar">';
          htmlPhrase += '<table>';
          htmlPhrase += '<tr><td>';
          // 予定
          if (judgeInSchedule(getDateFromString(pStartDateSche), getDateFromString(pEndDateSche), thisDate, DATE_TYPE_SCHE)) {
            htmlPhrase += '<div class="divInSchedule">';
          } else {
            if (isHoliday(thisDate)) {
              htmlPhrase += '<div class="divHoliday">';
            } else {
              htmlPhrase += '<div class="divOutOfSchedule">';
            }
          }
          htmlPhrase += '</div></td></tr>';
          // 実績
          htmlPhrase += '<tr><td>';
          if (judgeInSchedule(getDateFromString(pStartDate), getDateFromString(pEndDate), thisDate, DATE_TYPE_ACT)) {
            htmlPhrase += '<div class="divInAct">';
          } else {
            if (isHoliday(thisDate)) {
              htmlPhrase += '<div class="divHoliday">';
            } else {
              htmlPhrase += '<div class="divOutOfAct">';
            }
          }
          htmlPhrase += '</div></td></tr>';

          htmlPhrase += '</table>';
          htmlPhrase += '</td>';
        }
        htmlPhrase += '</tr>';

        return htmlPhrase;
      }

      /**
       * 予定日数のセット
       * @param  int pRowNumber [description]
       * @return void
       */
      function setScheDays(pRowNumber) {
        if (!isFinite(pRowNumber)) {
          return;
        }
        // 各種日付を取得
        var scheStartDate = $j('input.clStartDateSchedule__c').eq(pRowNumber).val();
        var scheEndDate = $j('input.clEndDateSchedule__c').eq(pRowNumber).val();
        $j('input[name="scheDays"]').eq(pRowNumber).val(calcDays(getDateFromString(scheStartDate), getDateFromString(scheEndDate)));
      }

      /**
       * 実績日数のセット
       * @param  int pRowNumber
       * @return void
       */
      function setActDays(pRowNumber) {
        if (!isFinite(pRowNumber)) {
          return;
        }
        // 各種日付を取得
        var actStartDate = $j('input.clStartDate__c').eq(pRowNumber).val();
        var actSEndDate = $j('input.clEndDate__c').eq(pRowNumber).val();
        $j('input[name="actDays"]').eq(pRowNumber).val(calcDays(getDateFromString(actStartDate), getDateFromString(actSEndDate)));
      }

      /**
       * カレンダーHTMLの作成
       * @param  int pRowNumber 行番号
       * @return String         HTML
       */
      function makeCalendar(pRowNumber) {
        if (!isFinite(pRowNumber)) {
          return;
        }
        // 各種日付を取得
        var scheStartDate = $j('input.clStartDateSchedule__c').eq(pRowNumber).val();
        var scheEndDate = $j('input.clEndDateSchedule__c').eq(pRowNumber).val();
        var actStartDate = $j('input.clStartDate__c').eq(pRowNumber).val();
        var actSEndDate = $j('input.clEndDate__c').eq(pRowNumber).val();

        // 現在のHTMLを消す
        $j('tr.trDraggable').eq(pRowNumber).find('td.tdCalendar').remove();

        // 新しいHTMLを作成
        $j('tr.trDraggable').eq(pRowNumber).append(getCalendarHtml(scheStartDate, scheEndDate, actStartDate, actSEndDate, pRowNumber));
      }

      /**
       * ステータス設定
       * @param int pRowNumber 行番号
       */
      function setStatus(pRowNumber) {
        if (!isFinite(pRowNumber)) {
          return;
        }
        // ステータス欄取得
        var statusField = $j('input.iptStatus').eq(pRowNumber);
        // tr取得
        var targetTr = $j('tr.trDraggable').eq(pRowNumber);
        // 日付取得
        var scheStartDate = $j('input.clStartDateSchedule__c').eq(pRowNumber).val();
        var scheEndDate = $j('input.clEndDateSchedule__c').eq(pRowNumber).val();
        var actStartDate = $j('input.clStartDate__c').eq(pRowNumber).val();
        var actSEndDate = $j('input.clEndDate__c').eq(pRowNumber).val();

        // 現在のClassを外す
        statusField.removeClass('statusNotStarted');
        statusField.removeClass('statusInProgress');
        statusField.removeClass('statusCompleted');
        statusField.removeClass('statusDelay');
        targetTr.removeClass('statusNotStarted');
        targetTr.removeClass('statusInProgress');
        targetTr.removeClass('statusCompleted');
        targetTr.removeClass('statusDelay');

        if (scheStartDate.trim().length == 0 || scheEndDate.trim().length == 0) {
          // 予定の開始終了のいずれかが未入力であれば未着手
          statusField.val(STATUS_NOTYETSTARTED).addClass('statusNotStarted');
          targetTr.addClass('statusNotStarted');
        } else if (actSEndDate.trim().length > 0) {
          // 実績終了が入力済みの場合は完了
          statusField.val(STATUS_COMPLETED).addClass('statusCompleted');
          targetTr.addClass('statusCompleted');
        } else if (getDateFromString(getFormattedDate(new Date())) > getDateFromString(scheStartDate) && actStartDate.trim().length == 0) {
          // 予定開始日を過ぎていて実績開始が未入力の場合は遅延
          statusField.val(STATUS_DELAY).addClass('statusDelay');
          targetTr.addClass('statusDelay');
        } else if (getDateFromString(getFormattedDate(new Date())) > getDateFromString(scheEndDate) && actSEndDate.trim().length == 0) {
          // 予定終了日を過ぎていて実績終了が未入力の場合は遅延
          statusField.val(STATUS_DELAY).addClass('statusDelay');
          targetTr.addClass('statusDelay');
        } else if (actStartDate.trim().length > 0) {
          // 実績開始が入力済みで実績終了が未入力の場合は進行中
          statusField.val(STATUS_INPROCESS).addClass('statusInProgress');
          targetTr.addClass('statusInProgress');
        } else {
          // 実績開始開始が未入力の場合は未着手
          statusField.val(STATUS_NOTYETSTARTED).addClass('statusNotStarted');
          targetTr.addClass('statusNotStarted');
        }

      }

      /**
       * 明細行を作成する
       * @param  Array pRecData 行データ
       * @param  int   pInsPoint 行番号。指定があるとその行の下に追加される。指定がなければ最終行の下に追加される。
       * @return void
       */
      function createRecord(pRecData, pInsPoint) {
        if (!pRecData) {
          return;
        }
        recType = 'tdSchedule';

        recHtml = '';
        recHtml += '<tr class="trDraggable">';
        // 移動アイコン
        recHtml += '<td class="' + recType + '">';
        recHtml += '<span class="ui-icon ui-icon-arrowthick-2-n-s"></span>';
        recHtml += '</td>';
        // ボタン、ステータス
        recHtml += '<td class="' + recType + ' height50 widthButton">';
        recHtml += '<table class="tabButtonStatus"><tr>';
        recHtml += '<td class="tdButtonDisplay">';
        recHtml += '<div class="divSmallButton btnDelete ui-corner-all ui-icon ui-icon-trash" title="削除"/>';
        recHtml += '</td>';
        recHtml += '<td class="tdButtonDisplay">';
        recHtml += '<div class="divSmallButton btnTaskLink ui-corner-all ui-icon ui-icon-extlink" title="詳細" />';
        recHtml += '</td>';
        recHtml += '<tr>';
        recHtml += '<td class="tdButtonDisplay">';
        recHtml += '<div class="divSmallButton btnAdd ui-corner-all ui-icon ui-icon-plus" title="追加" />';
        recHtml += '</td>';
        recHtml += '<td class="tdButtonDisplay">';
        recHtml += '<div class="divSmallButton btnCopy ui-corner-all ui-icon ui-icon-copy" title="複製" />';
        recHtml += '</td></tr></table>';
        recHtml += '</td>';
        // No.
        recHtml += '<td class="' + recType + ' height100 tdShortNumber">';
        recHtml += '<input type="text" readonly="true" name="TaskNumber__c" class="clTaskNumber__c iptReadOnly iptCenter" value="' + pRecData.TaskNumber__c + '" />';
        recHtml += '<input type="hidden" name="Id" class="clId" value="' + (pRecData.Id == undefined
          ? ''
          : pRecData.Id) + '" />';
        recHtml += '</td>';
        recHtml += '</td>';
        // ステータス
        recHtml += '<td class="' + recType + ' height100 widthNormal">';
        recHtml += '<input type="text" readonly="true" class="iptStatus ui-corner-all" value="" />';
        recHtml += '</td>';
        // タスク名
        recHtml += '<td class="' + recType + ' height100 widthWide tdMandatory">';
        recHtml += '<input type="text" name="Name" class="clName iptMandatory ui-corner-all" value="' + pRecData.Name + '" />';
        recHtml += '</td>';
        // 担当者
        recHtml += '<td class="' + recType + ' height100 widthNormal tdMandatory">';
        recHtml += '<input type="text" name="PersonInCharge__c" class="clPersonInCharge__c iptMandatory ui-corner-all" value="' + pRecData.PersonInCharge__c + '" />';
        recHtml += '<input type="hidden" name="TaskUser__c" class="clTaskUser__c" value="' + (pRecData.TaskUser__c == undefined
          ? ''
          : pRecData.TaskUser__c) + '" />';
        recHtml += '</td>';
        // 担当者ポップアップボタン
        recHtml += '<td class="' + recType + '">';
        recHtml += '<div class="divSmallButton divSelectUser ui-icon ui-icon-person ui-corner-all" title="ユーザから選択">担当</div>';
        recHtml += '</td>';
        // 開始日
        recHtml += '<td class="' + recType + ' height50 widthNormal">';
        recHtml += '<table class="tabDateDisplay"><tr><td class="tdDateDisplay tdMandatory">'
        recHtml += '<input type="text" name="StartDateSchedule__c" class="clStartDateSchedule__c iptMandatory iptDatePicker ui-corner-all" value="' + pRecData.StartDateSchedule__c + '" />';
        recHtml += '</td></tr><tr><td class="tdDateDisplay">';
        recHtml += '<input type="text" name="StartDate__c" class="clStartDate__c iptDatePicker ui-corner-all" value="' + (pRecData.StartDate__c == undefined
          ? ''
          : pRecData.StartDate__c) + '" />';
        recHtml += '</td></tr></table>';
        recHtml += '</td>';
        // 終了日
        recHtml += '<td class="' + recType + ' height50 widthNormal">';
        recHtml += '<table class="tabDateDisplay"><tr><td class="tdDateDisplay tdMandatory">'
        recHtml += '<input type="text" name="EndDateSchedule__c" class="clEndDateSchedule__c iptMandatory iptDatePicker ui-corner-all" value="' + pRecData.EndDateSchedule__c + '" />';
        recHtml += '</td></tr><tr><td class="tdDateDisplay">';
        recHtml += '<input type="text" name="EndDate__c" class="clEndDate__c iptDatePicker ui-corner-all" value="' + (pRecData.EndDate__c == undefined
          ? ''
          : pRecData.EndDate__c) + '" />';
        recHtml += '</td></tr></table>';
        recHtml += '</td>';
        // 日数
        recHtml += '<td class="' + recType + ' height50 tdShortNumber">';
        recHtml += '<table class="tabDaysDisplay"><tr><td class="tdDayDisplayUp">'
        recHtml += '<input type="text" name="scheDays" readonly="true" class="iptReadOnly iptCenter" value="' + calcDays(getDateFromString(pRecData.StartDateSchedule__c), getDateFromString(pRecData.EndDateSchedule__c)) + '" />';
        recHtml += '</td></tr><tr><td class="tdDayDisplayDown">';
        recHtml += '<input type="text" name="actDays" readonly="true" class="iptReadOnly iptCenter" value="' + calcDays(getDateFromString(pRecData.StartDate__c), getDateFromString(pRecData.EndDate__c)) + '" />';
        recHtml += '</td></tr></table>';
        recHtml += '</td>';

        // カレンダー
        recHtml += getCalendarHtml(pRecData.StartDateSchedule__c, pRecData.EndDateSchedule__c, pRecData.StartDate__c, pRecData.EndDate__c);

        if (pInsPoint == undefined) {
          tabTaskDataTbody.append(recHtml);
        } else if (pInsPoint == -1) {
          // タスク未登録時の空行
          tabTaskDataTbody.append(recHtml);
          setBind(); // バインド再設定
          reSetRowNumber(); // 連番振り直し
        } else {
          $j('tr.trDraggable').eq(pInsPoint).after(recHtml);
          setBind(); // バインド再設定
          reSetRowNumber(); // 連番振り直し
          remakeJSON(); // JSON作り直し
        }
      }

      /**
       * カレンダーの月ヘッダHTML作成
       * @return String
       */
      function getCalendarMonthHeaderHtml() {
        var calHdHtml = "";
        var recTypeHeader = 'thHeader thCalMonthHeader';
        // カレンダー上開始月
        calHdHtml += '<th class="' + recTypeHeader + '" colspan="' + getDaysInMonth(startMonth) + '">';
        calHdHtml += '<button class="btnPrevMonth">&lt;</button>';
        calHdHtml += '&nbsp;<span class="spanDisplayMonth">' + getYearMonthString(startMonth) + '</span>&nbsp;';
        calHdHtml += '<button class="btnNextMonth">&gt;</button>';
        calHdHtml += '&nbsp;<button class="btnThisMonth">今月</button>';
        calHdHtml += '</th>';
        // カレンダー上翌月
        calHdHtml += '<th class="' + recTypeHeader + '" colspan="' + getDaysInMonth(getNextMonth(startMonth)) + '">';
        calHdHtml += '<span class="spanDisplayMonth">' + getYearMonthString(getNextMonth(startMonth)) + '</span>';
        calHdHtml += '</th>';
        return calHdHtml;
      }

      /**
       * カレンダーの日付ヘッダHTML作成
       * @return String
       */
      function getCalendarDateHeaderHtml() {
        var calHdHtml = "";
        var recTypeHeader = 'thHeader thCalDateHeader';
        // 開始月
        for (var i = 1; i <= getDaysInMonth(startMonth); i++) {
          var nowDate = new Date(getYearWrap(startMonth), startMonth.getMonth(), i);
          var nowDateDayType = getDayType(nowDate);
          var dayClass = "";
          switch (nowDateDayType) {
            case DAY_TYPE_HOLIDAY:
              dayClass = CLASS_HOLIDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '" title="' + getHolidayName(nowDate) + '">' + i + '</th>';
              break;
            case DAY_TYPE_SUNDAY:
              dayClass = CLASS_SUNDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '">' + i + '</th>';
              break;
            case DAY_TYPE_SATURDAY:
              dayClass = CLASS_SATURDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '">' + i + '</th>';
              break;
            default:
              dayClass = CLASS_WEEKDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '">' + i + '</th>';
              break;
          }
        }
        // 翌月
        for (var i = 1; i <= getDaysInMonth(getNextMonth(startMonth)); i++) {
          var nowDate = new Date(getYearWrap(getNextMonth(startMonth)), getNextMonth(startMonth).getMonth(), i);
          var nowDateDayType = getDayType(nowDate);
          var dayClass = "";
          switch (nowDateDayType) {
            case DAY_TYPE_HOLIDAY:
              dayClass = CLASS_HOLIDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '" title="' + getHolidayName(nowDate) + '">' + i + '</th>';
              break;
            case DAY_TYPE_SUNDAY:
              dayClass = CLASS_SUNDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '">' + i + '</th>';
              break;
            case DAY_TYPE_SATURDAY:
              dayClass = CLASS_SATURDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '">' + i + '</th>';
              break;
            default:
              dayClass = CLASS_WEEKDAY;
              calHdHtml += '<th class="' + recTypeHeader + ' ' + dayClass + '">' + i + '</th>';
              break;
          }
        }
        return calHdHtml;
      }

      /**
       * 月移動共通アクション
       * @return void
       */
      function commonMoveMonthAction() {
        // 休日取得
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.TaskManage.getHoliday}', getFormattedDate(startMonth), function (result, event) {
          if (event.status) {
            arHolidays = Array();
            for (var i = 0; i < result.length; i++) {
              //alert(result[i].Name);
              arHolidays[i] = {
                "Name": result[i].Name,
                "ymd": result[i].ymd__c
              }
              //alert(recHoliday["Name"] + ":" + recHoliday["ymd"]);
            }
            // カレンダーヘッダ
            makeCalendarHeader();
            // カレンダー明細
            $j('tr.trDraggable').each(function () {
              var rowNum = $j('tr.trDraggable').index(this);
              makeCalendar(rowNum);
            });
          } else {
            alert(event.message);
            return null;
          }

        }, {
          escape: true
        });
      }

      /**
       * カレンダー部分のヘッダの作成
       * @return void
       */
      function makeCalendarHeader() {
        // 既存ヘッダの削除
        $j('.thCalMonthHeader').remove();
        $j('.thCalDateHeader').remove();
        // 月ヘッダの作成
        $j('tr.trHeadeTop').append(getCalendarMonthHeaderHtml());
        // 日付ヘッダの作成
        $j('tr.trHeaderBottom').append(getCalendarDateHeaderHtml());

        // ヘッダー部ボタンのバインド
        // 前月
        $j('button.btnPrevMonth').unbind('click');
        $j('button.btnPrevMonth').bind('click', function () {
          startMonth = getPrevMonth(startMonth);
          commonMoveMonthAction();
          return false;
        });
        // 翌月
        $j('button.btnNextMonth').unbind('click');
        $j('button.btnNextMonth').bind('click', function () {
          startMonth = getNextMonth(startMonth);
          commonMoveMonthAction();
          return false;
        });
        // 今月
        $j('button.btnThisMonth').unbind('click');
        $j('button.btnThisMonth').bind('click', function () {
          startMonth = getThisMonth();
          commonMoveMonthAction();
          return false;
        });
      }

      /**
       * ヘッダーの作成
       * @return void
       */
      function makeHeader() {

        var recHtml = '';
        var recType = '';
        var recTypeHeader = 'thHeader';

        // ヘッダ
        var recHtmlHeaderTh = '<th class="' + recTypeHeader + '">';
        // ヘッダ上段
        recHtml += '<tr class="trHeadeTop">';
        // タスクの上
        recHtml += '<th class="' + recTypeHeader + '" colspan="10">';
        recHtml += '<label><input type="checkBox" id="cbNotYetStarted" class="cbShowStatus" checked="true"/>' + STATUS_NOTYETSTARTED + '</label>&nbsp;&nbsp;';
        recHtml += '<label><input type="checkBox" id="cbInProgress" class="cbShowStatus" checked="true"/>' + STATUS_INPROCESS + '</label>&nbsp;&nbsp;';
        recHtml += '<label><input type="checkBox" id="cbCompleted" class="cbShowStatus" checked="true"/>' + STATUS_COMPLETED + '</label>&nbsp;&nbsp;';
        recHtml += '<label><input type="checkBox" id="cbDelay" class="cbShowStatus" checked="true"/>' + STATUS_DELAY + '</label>';
        recHtml += '</th>';
        recHtml += '</tr>';
        // ヘッダ下段
        recHtml += '<tr class="trHeaderBottom">';
        // 移動アイコン
        recHtml += recHtmlHeaderTh;
        recHtml += '</th>';
        // ボタン
        recHtml += recHtmlHeaderTh;
        recHtml += '操作';
        recHtml += '</th>';
        // No.
        recHtml += recHtmlHeaderTh;
        recHtml += 'No.';
        recHtml += '</th>';
        // ステータス
        recHtml += recHtmlHeaderTh;
        recHtml += 'ステータス';
        recHtml += '</th>';
        // タスク名
        recHtml += recHtmlHeaderTh;
        recHtml += 'タスク名';
        recHtml += '</th>';
        // 担当者
        recHtml += '<th class="' + recTypeHeader + '" colspan="2">';
        recHtml += '担当者';
        recHtml += '</th>';
        // 開始
        recHtml += recHtmlHeaderTh;
        recHtml += '開始予定/実績';
        recHtml += '</th>';
        // 終了
        recHtml += recHtmlHeaderTh;
        recHtml += '終了予定/実績';
        recHtml += '</th>';
        // 日数
        recHtml += recHtmlHeaderTh;
        recHtml += '日数';
        recHtml += '</th>';
        recHtml += '</tr>';

        // 表に追加
        tabTaskDataTHead.append(recHtml);

      }

      /**
       * 部署リスト作成
       * @param  String pSelectedComp 会社の選択値
       * @return void
       */
      function remakeDeptList(pSelectedComp) {
        if (!pSelectedComp) {
          return false;
        }
        var deptHtml = HTML_OPTION_COMPALL;
        $j('#selDept option').remove();
        $j('#selDept').append(deptHtml);
        if (pSelectedComp != LIST_VALUE_ALL) {
          // すべて以外の場合は指定の会社名の部署のリストを作成
          for (var i = 0; i < arDepartment.length; i++) {
            if (arDepartment[i]["COMP"] == pSelectedComp) {
              deptHtml = '<option class="optDept optDeptDetail">' + arDepartment[i]["DEPT"] + '</option>';
              $j('#selDept').append(deptHtml);
            }
          }
        }
      }

      /**
       * ユーザの再読み込み
       * @return void
       */
      function reloadUser() {
        var cond = $j('#selComp').val() + ":" + $j('#selDept').val();
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.TaskManage.getUserByDept}', cond, function (result, event) {
          if (event.status) {
            $j('li.liUser').remove();
            for (var i = 0; i < result.length; i++) {
              var liHtml = '<li class="liUser ui-widget-content ui-corner-all">' + result[i]["Name"];
              liHtml += '<input type="hidden" name="TaskUser__c" value="' + result[i]["Id"] + '" />';
              liHtml += '</li>';
              $j('#ulUser').append(liHtml);
            }
            // セレクタブル化
            $j('#ulUser').selectable();
            // 選択したらセット
            $j('#ulUser > li').unbind('click');
            $j('#ulUser > li').bind('click', function () {
              if (!$j(this).text() == "") {

                // 名前を担当者にセットする
                var targetRowNum = parseInt($j('#hidUserReturnRowNum').val(), 10);
                $j('input[name="PersonInCharge__c"]').eq(targetRowNum).val($j(this).text());
                // IDをHIDDEN項目にセットする
                $j('input[name="TaskUser__c"]').eq(targetRowNum).val($j(this).find('input[name="TaskUser__c"]').val());
              }
              // JSONを再作成
              remakeJSON();
              $j('#divUserPopup').dialog('close');
            });
          } else {
            alert(event.message);
            return null;
          }
        });
      }

/****************************************
 * 初期処理
 ****************************************/
      // 休日取得
      Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.TaskManage.getHoliday}', getFormattedDate(startMonth), function (result, event) {
        if (event.status) {
          arHolidays = Array();
          for (var i = 0; i < result.length; i++) {
            //alert(result[i].Name);
            arHolidays[i] = {
              "Name": result[i].Name,
              "ymd": result[i].ymd__c
            }
            //alert(recHoliday["Name"] + ":" + recHoliday["ymd"]);
          }

          // 明細テーブル作成
          // タスクヘッダ
          makeHeader();
          // カレンダーヘッダ
          makeCalendarHeader();
          // 明細
          for (var i = 0; i < taskRecData.length; i++) {
            createRecord(taskRecData[i]);
            setStatus(i); // ステータス設定
          }

          // ここでJSONを再作成しておく
          remakeJSON();

          // エラーメッセージがある場合は表示する
          $j('#spanErrorMessage').find('p').remove();
          if (errorMessage != "" && errorMessage != undefined) {
            for (var rowkey in errorMessage) {
              var messPhrase = (parseInt(rowkey, 10) + 1) + "行目 ";
              for (var itemkey in errorMessage[rowkey]) {
                messPhrase += itemkey + ":" + errorMessage[rowkey][itemkey] + " ";
              }
              $j('#spanErrorMessage').append('<p class="spanErrorMessage">' + messPhrase + '</p>');
            }
          }

          // 明細0の場合は空の行を作成する
          if (taskRecData == "" || taskRecData.length == 0) {
            var copyRec = {
              "EndDateSchedule__c": "",
              "Id": "",
              "Name": "",
              "PersonInCharge__c": "",
              "StartDateSchedule__c": "",
              "TaskNumber__c": "",
              "StartDate__c": "",
              "EndDate__c": "",
              "TaskUser__c": ""
            };

            createRecord(copyRec, -1);
          }

          // バインドの設定
          setBind();

          /* 行のドラッグ移動 */
          tabTaskDataTbody.sortable({
            axis: "y",
            items: "tr.trDraggable",
            placeholder: "ui-state-highlight",
            stop: function () {
              reSetRowNumber();
              remakeJSON();
            }
          });
          tabTaskDataTbody.bind('click.sortable mousedown.sortable', function (ev) {
            ev.target.focus();
          });
          tabTaskDataTbody.disableSelection();

          /* 行表示のチェックボックス */
          var objTr = $j('tr.trDraggable');
          // 未着手
          $j('#tabTaskData input#cbNotYetStarted').unbind('change');
          $j('#tabTaskData input#cbNotYetStarted').bind('change', function () {
            setRowVisibility();
          });
          // 進行中
          $j('#tabTaskData input#cbInProgress').unbind('change');
          $j('#tabTaskData input#cbInProgress').bind('change', function () {
            setRowVisibility();
          });
          // 完了済
          $j('#tabTaskData input#cbCompleted').unbind('change');
          $j('#tabTaskData input#cbCompleted').bind('change', function () {
            setRowVisibility();
          });
          // 遅延
          $j('#tabTaskData input#cbDelay').unbind('change');
          $j('#tabTaskData input#cbDelay').bind('change', function () {
            setRowVisibility();
          });

          /* 会社取得 */
          Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.TaskManage.getDepartment}', function (result, event) {
            if (event.status) {
              arCompany = Array();
              arDepartment = Array();
              for (var i = 0; i < result.length; i++) {
                arDepartment[i] = {
                  "COMP": result[i].CompanyName,
                  "DEPT": result[i].Department
                };
                if ($j.inArray(result[i].CompanyName, arCompany) < 0) {
                  arCompany.push(result[i].CompanyName);
                }
              }

              // 会社リスト作成
              var compHtml = HTML_OPTION_COMPALL;
              $j('#selComp').append(compHtml);
              for (var i = 0; i < arCompany.length; i++) {
                compHtml = '<option class="optComp optCompDetail">' + arCompany[i] + '</option>';
                $j('#selComp').append(compHtml);
              }
              // 部署リスト作成
              var deptHtml = HTML_OPTION_DEPTALL;
              $j('#selDept').append(deptHtml);

              /* 会社変更時の処理(初期) */
              $j('#selComp').bind('change', function () {
                // 部署のリスト変更
                remakeDeptList($j(this).val());
                // ユーザ再読み込み
                reloadUser();
              });
              /* 部署変更時の処理(初期) */
              $j('#selDept').bind('change', function () {
                // ユーザ再読み込み
                reloadUser();
              });

              /* ポップアップ用DIVの設定 */
              $j("#divUserPopup").css('visibility', 'visible');
              $j("#divUserPopup").dialog({
                modal: true,
                autoOpen: false,
                title: "ユーザ選択",
                buttons: {
                  "OK": function () {
                    // 複数選択は不可とする
                    var selectedItems = $j('li.ui-selected');
                    if (selectedItems.size() > 1) {
                      alert("1名だけ選択して下さい。");
                      return;
                    }
                    // ポップアップクローズ
                    $j(this).dialog('close');
                  }
                }
              });
            } else {
              alert(event.message);
              return false;
            }
          });

        } else {
          alert(event.message);
          return null;
        }

      }, {
        escape: true
      });

    });
  </script>
</apex:page>